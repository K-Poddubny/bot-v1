import os
import re
import csv
import io
import asyncio
import logging
import warnings
from typing import Optional, List, Dict, Any

from urllib3.exceptions import NotOpenSSLWarning
warnings.filterwarnings('ignore', category=NotOpenSSLWarning)

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters,
)
import httpx

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or "8449257401:AAFLCuuyBi1Mmd63gkF6ujB1hGSdAFyn_9w"

# –¢–∏—Ö–∏–µ –ª–æ–≥–∏
logging.basicConfig(level=logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CITIES = ["–ú–æ—Å–∫–≤–∞"]
ROLES = ["–í–æ–¥–∏—Ç–µ–ª—å", "–ö—É—Ä—å–µ—Ä", "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π", "–†–∞–±–æ—Ç–Ω–∏–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞"]

# Google Sheet
SHEET_ID = "1_KIjSrpBbc3xv-fuobapE2xj12kR6-tUmZEiLe41NKw"
# –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV (gid=0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –µ—Å–ª–∏ –ª–∏—Å—Ç –¥—Ä—É–≥–æ–π ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π gid)
CSV_URLS = [
    f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export?format=csv",
    f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv",
]

COL_IDX = {
    "desc": 3,        # D
    "activity": 6,    # G
    "salary_k": 10,   # K
    "salary_l": 11,   # L
    "title": 1,       # B (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    "employer": 2,    # C
}

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
def parse_salary_value(text: str) -> Optional[int]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: 90000, 90 000, 90k/90–∫, 90 —Ç—ã—Å, 1.2–º, 120000-180000, 120 000 ‚ÇΩ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ.
    """
    if not text:
        return None
    t = str(text).lower().strip()
    nums: List[int] = []

    # –≥–æ–ª—ã–µ —á–∏—Å–ª–∞
    for m in re.findall(r"\d[\d\s.,]*", t):
        digits = re.sub(r"[^\d]", "", m)
        if digits:
            try:
                nums.append(int(digits))
            except ValueError:
                pass

    # k / –∫ / —Ç—ã—Å
    for val, _ in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(k|–∫|—Ç—ã—Å)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0", "")) * 1_000)
            nums.append(v)
        except ValueError:
            pass

    # m / –º / –º–ª–Ω
    for val, _ in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(m|–º|–º–ª–Ω)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0", "")) * 1_000_000)
            nums.append(v)
        except ValueError:
            pass

    if not nums:
        return None
    return max(nums)

async def http_get_bytes(url: str) -> Optional[bytes]:
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.get(url)
            if r.status_code == 200 and r.content:
                return r.content
    except Exception:
        logger.exception("http get failed: %s", url)
    return None

async def fetch_sheet_rows() -> List[List[str]]:
    # –ü—Ä–æ–±—É–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ URL —ç–∫—Å–ø–æ—Ä—Ç–∞
    for url in CSV_URLS:
        data = await http_get_bytes(url)
        if not data:
            continue
        try:
            text = data.decode("utf-8", errors="ignore")
            reader = csv.reader(io.StringIO(text))
            rows = [row for row in reader]
            if rows:
                return rows
        except Exception:
            logger.exception("csv parse failed")
    return []

def salary_from_row(row: List[str]) -> Optional[int]:
    """–°–Ω–∞—á–∞–ª–∞ L, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî K."""
    lval = row[COL_IDX["salary_l"]].strip() if len(row) > COL_IDX["salary_l"] else ""
    kval = row[COL_IDX["salary_k"]].strip() if len(row) > COL_IDX["salary_k"] else ""
    val = lval or kval
    return parse_salary_value(val)

def role_matches(row: List[str], role: str) -> bool:
    act = row[COL_IDX["activity"]].lower() if len(row) > COL_IDX["activity"] else ""
    return role.lower() in act

def pick_vacancies(rows: List[List[str]], role: str, want: int) -> Dict[str, Any]:
    items = []
    for i, row in enumerate(rows):
        if i == 0:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            continue
        if not role_matches(row, role):
            continue
        smax = salary_from_row(row)
        if smax is None:
            continue
        items.append({
            "idx": i,
            "salary": smax,
            "title": row[COL_IDX["title"]] if len(row) > COL_IDX["title"] else "–í–∞–∫–∞–Ω—Å–∏—è",
            "employer": row[COL_IDX["employer"]] if len(row) > COL_IDX["employer"] else "",
            "desc": row[COL_IDX["desc"]] if len(row) > COL_IDX["desc"] else "",
        })

    items.sort(key=lambda x: x["salary"], reverse=True)
    top = items[:5]
    found_higher = any(x["salary"] >= want for x in top)
    return {"items": top, "found_higher": found_higher}

async def show_results_list(update: Update, context: ContextTypes.DEFAULT_TYPE,
                            results: Dict[str, Any], want: Optional[int] = None):
    items = results.get("items", [])
    found_higher = results.get("found_higher", False)
    if not items:
        await (update.message or update.callback_query).reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    header = "–£—Ä–∞! –Ø –Ω–∞—à—ë–ª –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã—à–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ üéâ" if (want and found_higher) \
             else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à—ë–ª –∏–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É, –Ω–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ:"

    lines = [header, ""]
    kb_rows = []
    for it in items:
        pretty = f"{it['salary']:,}".replace(",", " ")
        title = it["title"] or "–í–∞–∫–∞–Ω—Å–∏—è"
        lines.append(f"‚Ä¢ {title} ‚Äî {pretty} ‚ÇΩ")
        kb_rows.append([InlineKeyboardButton(f"{title} ‚Äî {pretty} ‚ÇΩ", callback_data=f"open:{it['idx']}")])

    text = "\n".join(lines)
    await (update.message or update.callback_query).reply_text(
        text, reply_markup=InlineKeyboardMarkup(kb_rows)
    )

# ---- –•—ç–Ω–¥–ª–µ—Ä—ã ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find")]]
    )
    await (update.message or update.callback_query).reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –Ω–∞—á–Ω—ë–º!",
        reply_markup=kb
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await (update.message or update.callback_query).reply_text("pong")

async def btn_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "find":
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(c, callback_data=f"city:{c}")] for c in CITIES]
        )
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
        context.user_data["state"] = "CHOOSE_CITY"
        return

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        context.user_data["city"] = city
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(r, callback_data=f"role:{r}")] for r in ROLES]
        )
        await q.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}\n–ö–µ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=kb)
        context.user_data["state"] = "CHOOSE_ROLE"
        return

    if data.startswith("role:"):
        role = data.split(":", 1)[1]
        context.user_data["role"] = role
        context.user_data["state"] = "AWAIT_SALARY"
        await q.edit_message_text(
            f"–ì–æ—Ä–æ–¥: {context.user_data.get('city')}\n–†–æ–ª—å: {role}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 000):"
        )
        return

    if data.startswith("open:"):
        idx = int(data.split(":", 1)[1])
        rows = context.user_data.get("rows_cache") or []
        if not rows or idx <= 0 or idx >= len(rows):
            await q.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start.")
            return
        row = rows[idx]
        desc = row[COL_IDX["desc"]] if len(row) > COL_IDX["desc"] else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="back_to_list"),
             InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply:{idx}")]
        ])
        await q.edit_message_text(desc, reply_markup=kb)
        return

    if data == "back_to_list":
        results = context.user_data.get("last_results", {})
        await show_results_list(update, context, results)
        return

    if data.startswith("apply:"):
        await q.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è. (–¥–µ–º–æ)")
        return

async def ask_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_in = (update.message.text or "").strip()
    want = parse_salary_value(text_in)
    if not want:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏ *—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏* –±–µ–∑ —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `90000`\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã: `90 000`, `90k/90–∫`, `90 —Ç—ã—Å`.",
            parse_mode="Markdown"
        )
        return

    context.user_data["salary"] = want
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è–ª —Å—É–º–º—É: {want:,} ‚ÇΩ. –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏‚Ä¶".replace(",", " "))

    rows = await fetch_sheet_rows()
    if not rows:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    context.user_data["rows_cache"] = rows

    role = context.user_data.get("role", "")
    results = pick_vacancies(rows, role, want)
    context.user_data["last_results"] = results
    await show_results_list(update, context, results, want)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") == "AWAIT_SALARY":
        await ask_salary(update, context)
        return
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    return

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CallbackQueryHandler(btn_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    async def _on_start(_: Application):
        me = await app.bot.get_me()
        print(f"[bot] online: @{me.username}", flush=True)

    app.post_init = _on_start
    app.run_polling()
