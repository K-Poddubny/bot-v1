# -*- coding: utf-8 -*-
# Telegram Job Bot (PTB 22.x)
# –°—Ç–∞—Ä—Ç/—Å—Ç–æ–ø: ./run.sh  (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî Ctrl+C)

from __future__ import annotations

import os
import re
import csv
import io
import logging
import asyncio
from typing import Any, List, Dict, Optional, Tuple

import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = "8449257401:AAFLCuuyBi1Mmd63gkF6ujB1hGSdAFyn_9w"

# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: —ç–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–∞ Google Sheets –≤ CSV
SHEET_CSV_URL = (
    "https://docs.google.com/spreadsheets/d/"
    "1_KIjSrpBbc3xv-fuobapE2xj12kR6-tUmZEiLe41NKw/export?format=csv"
)

# –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (0-based)
COL_ROLE = 6           # G ‚Äî –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
COL_CITY = 7           # H ‚Äî –ì–æ—Ä–æ–¥
COL_TITLE = 2          # C ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ/–ö–æ–º–ø–∞–Ω–∏—è
COL_DESC = 3           # D ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ
COL_SAL_PRIOR = 11     # L ‚Äî –ó–∞—Ä–ø–ª–∞—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
COL_SAL_FALLBACK = 10  # K ‚Äî –ó–∞—Ä–ø–ª–∞—Ç–∞ (–µ—Å–ª–∏ L –ø—É—Å—Ç–æ–π)

# –í—ã–±–æ—Ä —Ä–æ–ª–µ–π
ROLES = ["–í–æ–¥–∏—Ç–µ–ª—å", "–ö—É—Ä—å–µ—Ä", "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π", "–†–∞–±–æ—Ç–Ω–∏–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞"]

# –°–æ–æ–±—â–µ–Ω–∏—è
MSG_GREETING = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏."
MSG_CHOOSE_CITY = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
MSG_CHOOSE_ROLE = "–ö–µ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?"
MSG_ASK_SALARY = "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 000):"
MSG_SALARY_BAD = "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä: 90000"
MSG_FOUND_ABOVE = "üéâ –£—Ä–∞, —è –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–π –∂–µ–ª–∞–µ–º–æ–π!"
MSG_FOUND_BELOW = "üôá –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–∞–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –Ω–µ—Ç, –Ω–æ –≤–æ—Ç –ª—É—á—à–∏–µ –±–ª–∏–∑–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
MSG_EMPTY = "–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—É–º–º—É."

# –õ–æ–≥–∏ —Ç–∏—à–µ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
for noisy in ("httpx", "httpcore", "telegram", "telegram.ext", "urllib3"):
    logging.getLogger(noisy).setLevel(logging.WARNING)
log = logging.getLogger("bot")


# ================== –£–¢–ò–õ–ò–¢–´ ==================
def chunked(items: List[Any], n: int) -> List[List[Any]]:
    return [items[i:i+n] for i in range(0, len(items), n)]

def kb(rows: List[List[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(rows or [])

def norm(s: Optional[str]) -> str:
    return (s or "").strip()

def norm_lc(s: Optional[str]) -> str:
    return norm(s).lower()

def parse_salary_value(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ (—Ä—É–±/–º–µ—Å) –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: '90 000', '90–∫/90k', '100 —Ç—ã—Å', '100-120'."""
    if not text:
        return None
    t = str(text).lower()
    t = (t.replace("—Ä—É–±–ª–µ–π", "—Ä—É–±").replace("—Ä—É–±.", "—Ä—É–±").replace("‚ÇΩ", "—Ä—É–±")
           .replace("—Ç—ã—Å.", "—Ç—ã—Å").replace("—Ç—ã—Å—è—á", "—Ç—ã—Å").replace("—Ç—ã—Å—è—á–∏", "—Ç—ã—Å")
           .replace("k", "–∫"))
    # –¥–∏–∞–ø–∞–∑–æ–Ω
    m = re.search(r'(\d[\d\s.,]*)\s*(?:-|‚Äì|‚Äî)\s*(\d[\d\s.,]*)\s*(–∫|—Ç—ã—Å)?', t)
    if m:
        a, b, suf = m.group(1), m.group(2), m.group(3)
        return max(_to_int(a, suf), _to_int(b, suf)) or None
    # –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ + –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    m = re.search(r'(\d[\d\s.,]*)\s*(–∫|—Ç—ã—Å)?', t)
    if m:
        return _to_int(m.group(1), m.group(2)) or None
    return None

def _to_int(raw: str, suf: Optional[str]) -> int:
    digits = re.sub(r'\D', '', raw or "")
    if not digits:
        return 0
    n = int(digits)
    if suf in ("–∫", "—Ç—ã—Å"):
        n *= 1000
    return n

def clean_description(raw: str) -> str:
    """–ß–∏—Å—Ç–∏–º HTML, –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –º–∞—Ä–∫–µ—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–ª—é—á–µ–≤—ã–º –±–ª–æ–∫–∞–º."""
    if not raw:
        return "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    t = raw
    t = re.sub(r'<br\s*/?>', '\n', t, flags=re.I)
    t = re.sub(r'<[^>]+>', '', t)
    t = t.replace("&nbsp;", " ")
    # —É–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ/—Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ ¬´–ò—â–µ–º –í–æ–¥–∏—Ç–µ–ª–µ–π...¬ª
    t = re.sub(r'(?im)^\s*–∏—â–µ–º\s+[^.\n]+\s*$', '', t)
    # –º–∞—Ä–∫–µ—Ä—ã ‚Üí —Ç–æ—á–∫–∏
    t = t.replace("‚Äî", "-").replace("‚Äì", "-")
    t = re.sub(r'[\u2022‚Ä¢‚ñ™Ô∏é‚ñ´Ô∏é‚óè‚ó¶‚óÜ‚ñ∫‚úî‚úÖ‚û§‚ûî‚û§]', '‚Ä¢', t)
    t = re.sub(r'-{2,}', '-', t)
    # –∑–∞–≥–æ–ª–æ–≤–∫–∏
    repl = [
        (r'(?im)^\s*–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º\s*:?$', "‚ú® –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:"),
        (r'(?im)^\s*–º—ã –æ–∂–∏–¥–∞–µ–º[^:]*\s*:?$', "üß© –ú—ã –æ–∂–∏–¥–∞–µ–º:"),
        (r'(?im)^\s*—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\s*:?$', "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:"),
        (r'(?im)^\s*–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\s*:?$', "üõ† –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:"),
        (r'(?im)^\s*—É—Å–ª–æ–≤–∏—è\s*:?$', "üìÑ –£—Å–ª–æ–≤–∏—è:")
    ]
    for pat, rep in repl:
        t = re.sub(pat, rep, t)
    t = re.sub(r'\n{3,}', '\n\n', t).strip()
    return t or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

def salary_from_row(row: List[str]) -> int:
    val = ""
    if len(row) > COL_SAL_PRIOR and norm(row[COL_SAL_PRIOR]):
        val = row[COL_SAL_PRIOR]
    elif len(row) > COL_SAL_FALLBACK and norm(row[COL_SAL_FALLBACK]):
        val = row[COL_SAL_FALLBACK]
    s = parse_salary_value(val)
    return s or 0

def title_from_row(row: List[str]) -> str:
    parts = []
    if len(row) > COL_TITLE and norm(row[COL_TITLE]):
        parts.append(norm(row[COL_TITLE]))
    if len(row) > COL_ROLE and norm(row[COL_ROLE]):
        parts.append(norm(row[COL_ROLE]))
    return " ‚Äî ".join(parts) if parts else "–í–∞–∫–∞–Ω—Å–∏—è"

def city_from_row(row: List[str]) -> str:
    return norm(row[COL_CITY]) if len(row) > COL_CITY else ""

def role_match(row: List[str], role: str) -> bool:
    return role.lower() in norm_lc(row[COL_ROLE] if len(row) > COL_ROLE else "")


# ================== –î–ê–ù–ù–´–ï ==================
def fetch_sheet_rows_sync() -> List[List[str]]:
    with httpx.Client(timeout=20) as client:
        r = client.get(SHEET_CSV_URL, follow_redirects=True)
        r.raise_for_status()
        text = r.content.decode("utf-8-sig", errors="replace")
    reader = csv.reader(io.StringIO(text))
    rows = [list(row) for row in reader]
    # —Å—Ä–µ–∂–µ–º —Ö–µ–¥–µ—Ä, –µ—Å–ª–∏ —Ç–∞–º "–≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    if rows and len(rows[0]) > COL_ROLE and "–≤–∏–¥" in norm_lc(rows[0][COL_ROLE]):
        rows = rows[1:]
    return rows

async def get_rows(context: ContextTypes.DEFAULT_TYPE) -> List[List[str]]:
    cache = context.bot_data.get("rows_cache")
    if isinstance(cache, list) and cache:
        return cache
    rows = await asyncio.to_thread(fetch_sheet_rows_sync)
    context.bot_data["rows_cache"] = rows
    return rows

def unique_cities(rows: List[List[str]]) -> List[str]:
    seen, out = set(), []
    for r in rows:
        c = city_from_row(r)
        if not c:
            continue
        key = c.lower()
        if key not in seen:
            seen.add(key)
            out.append(c)
    if "–ú–æ—Å–∫–≤–∞" in out:
        out = ["–ú–æ—Å–∫–≤–∞"] + [x for x in out if x != "–ú–æ—Å–∫–≤–∞"]
    return out or ["–ú–æ—Å–∫–≤–∞"]


# ================== –•–ï–ù–î–õ–ï–†–´ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    buttons = [[InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find")]]
    await update.effective_message.reply_text(MSG_GREETING, reply_markup=kb(buttons))

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "") if q else ""
    if q: await q.answer()

    if data == "find":
        rows = await get_rows(context)
        cities = unique_cities(rows)
        # –ø–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞—è ‚Äî –ú–æ—Å–∫–≤–∞
        btns = [InlineKeyboardButton(c, callback_data=f"city:{c}") for c in cities]
        buttons = chunked(btns, 2)
        await (q.edit_message_text if q else update.effective_message.reply_text)(
            MSG_CHOOSE_CITY, reply_markup=kb(buttons)
        )
        return

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        context.user_data["city"] = city
        btns = [InlineKeyboardButton(r, callback_data=f"role:{r}") for r in ROLES]
        buttons = chunked(btns, 2)
        await (q.edit_message_text if q else update.effective_message.reply_text)(
            MSG_CHOOSE_ROLE, reply_markup=kb(buttons)
        )
        return

    if data.startswith("role:"):
        role = data.split(":", 1)[1]
        context.user_data["role"] = role
        context.user_data["await_salary"] = True
        await (q.edit_message_text if q else update.effective_message.reply_text)(
            f"–ì–æ—Ä–æ–¥: {context.user_data.get('city','–ú–æ—Å–∫–≤–∞')}\n–†–æ–ª—å: {role}\n\n{MSG_ASK_SALARY}"
        )
        return

    if data.startswith("vac:"):
        idx = int(data.split(":", 1)[1])
        results = context.user_data.get("results", [])
        if not (0 <= idx < len(results)):
            if q: await q.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        row = results[idx]["row"]
        desc = clean_description(row[COL_DESC] if len(row) > COL_DESC else "")
        title = title_from_row(row)
        city = city_from_row(row)
        sal = results[idx]["salary"]
        buttons = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="back_to_results"),
             InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply:{idx}")]
        ]
        text = f"{title}\nüèô {city}\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {sal:,} ‚ÇΩ\n\n{desc}".replace(",", " ")
        await (q.edit_message_text if q else update.effective_message.reply_text)(
            text, reply_markup=kb(buttons)
        )
        return

    if data == "back_to_results":
        await show_results_list(update, context)
        return

    if data.startswith("apply:"):
        if q: await q.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! (–¥–µ–º–æ)", show_alert=True)
        return

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("await_salary"):
        return
    want = parse_salary_value(update.effective_message.text or "")
    if not want:
        await update.effective_message.reply_text(MSG_SALARY_BAD)
        return
    context.user_data["await_salary"] = False
    context.user_data["want_salary"] = want
    await do_search(update, context)

async def do_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = context.user_data.get("city", "–ú–æ—Å–∫–≤–∞")
    role = context.user_data.get("role", "")
    want = context.user_data.get("want_salary", 0)

    rows_all = await get_rows(context)
    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    rows = [r for r in rows_all if norm_lc(r[COL_CITY] if len(r) > COL_CITY else "") == norm_lc(city)]
    # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    rows = [r for r in rows if (len(r) > COL_ROLE and role_match(r, role))]
    if not rows:
        await update.effective_message.reply_text(MSG_EMPTY)
        return

    prepared = [{"row": r, "salary": salary_from_row(r)} for r in rows]
    prepared.sort(key=lambda x: x["salary"], reverse=True)
    top = prepared[:5]
    context.user_data["results"] = top

    any_ge = any(item["salary"] >= want for item in top)
    head = MSG_FOUND_ABOVE if any_ge else MSG_FOUND_BELOW

    lines = []
    for i, it in enumerate(top, 1):
        row = it["row"]
        sal = it["salary"]
        lines.append(f"{i}. {title_from_row(row)} ‚Äî {sal:,} ‚ÇΩ".replace(",", " "))
    text = f"{head}\n\n–ì–æ—Ä–æ–¥: {city}\n–†–æ–ª—å: {role}\n–ñ–µ–ª–∞–µ–º–∞—è: {want:,} ‚ÇΩ\n\n".replace(",", " ") + "\n".join(lines)

    # –∫–Ω–æ–ø–∫–∏ 1..N
    btns = [[InlineKeyboardButton(f"{i+1}", callback_data=f"vac:{i}") for i in range(len(top))]]
    btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)", callback_data="find")])

    await update.effective_message.reply_text(text, reply_markup=kb(btns))

async def show_results_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = context.user_data.get("results", [])
    if not results:
        await update.effective_message.reply_text(MSG_EMPTY)
        return
    lines = []
    for i, it in enumerate(results, 1):
        row = it["row"]
        sal = it["salary"]
        lines.append(f"{i}. {title_from_row(row)} ‚Äî {sal:,} ‚ÇΩ".replace(",", " "))
    btns = [[InlineKeyboardButton(f"{i+1}", callback_data=f"vac:{i}") for i in range(len(results))]]
    btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)", callback_data="find")])
    await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n" + "\n".join(lines), reply_markup=kb(btns))


# ================== WIRING ==================
def build_app() -> Application:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app

def main() -> None:
    app = build_app()
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
