import os
import re
import csv
import io
import logging
import warnings
from typing import Optional, List, Dict, Any

from dotenv import load_dotenv
load_dotenv()  # –µ—Å–ª–∏ –µ—Å—Ç—å .env ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏–º TELEGRAM_BOT_TOKEN

# –ø—Ä–∏–≥–ª—É—à–∏–º –≤–æ—Ä–Ω–∏–Ω–≥–∏ –æ—Ç urllib3 OpenSSL –Ω–∞ –º–∞–∫–µ
try:
    from urllib3.exceptions import NotOpenSSLWarning
    warnings.filterwarnings("ignore", category=NotOpenSSLWarning)
except Exception:
    pass

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters,
)
import httpx

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
# –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Ç–æ–∫–µ–Ω –∫–∞–∫ —Ñ–æ–ª–±—ç–∫
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or "8449257401:AAFLCuuyBi1Mmd63gkF6ujB1hGSdAFyn_9w"

SHEET_ID = "1_KIjSrpBbc3xv-fuobapE2xj12kR6-tUmZEiLe41NKw"
CSV_URLS = [
    f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export?format=csv",
    f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv",
]

CITIES = ["–ú–æ—Å–∫–≤–∞"]
ROLES = ["–í–æ–¥–∏—Ç–µ–ª—å", "–ö—É—Ä—å–µ—Ä", "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π", "–†–∞–±–æ—Ç–Ω–∏–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞"]

# –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (0-based)
COL = {
    "TITLE": 1,      # B
    "EMPLOYER": 2,   # C
    "DESC": 3,       # D
    "ACTIVITY": 6,   # G
    "SAL_K": 10,     # K
    "SAL_L": 11,     # L
}

# –õ–æ–≥–∏ —Ç–∏—à–µ
logging.basicConfig(level=logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
log = logging.getLogger("bot")

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def parse_salary_value(text: str) -> Optional[int]:
    """
    –ü–æ–Ω–∏–º–∞–µ–º 90000, 90 000, 90k/90–∫, 90 —Ç—ã—Å, 1.2–º/1.2 –º–ª–Ω, –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º).
    """
    if not text:
        return None
    t = str(text).lower().strip()
    nums: List[int] = []

    # ¬´–≥–æ–ª—ã–µ¬ª —á–∏—Å–ª–∞
    for m in re.findall(r"\d[\d\s.,]*", t):
        digits = re.sub(r"[^\d]", "", m)
        if digits:
            try:
                nums.append(int(digits))
            except ValueError:
                pass

    # k/–∫/—Ç—ã—Å
    for val, _unit in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(k|–∫|—Ç—ã—Å)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0", "")) * 1_000)
            nums.append(v)
        except ValueError:
            pass

    # m/–º/–º–ª–Ω
    for val, _unit in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(m|–º|–º–ª–Ω)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0", "")) * 1_000_000)
            nums.append(v)
        except ValueError:
            pass

    if not nums:
        return None
    return max(nums)

async def http_get_bytes(url: str) -> Optional[bytes]:
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            r = await client.get(url)
            if r.status_code == 200 and r.content:
                return r.content
    except Exception:
        log.exception("GET failed: %s", url)
    return None

async def fetch_sheet_rows() -> List[List[str]]:
    """–¢—è–Ω–µ–º CSV –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–µ–±–æ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É—Ä–ª–∞)."""
    for url in CSV_URLS:
        data = await http_get_bytes(url)
        if not data:
            continue
        try:
            text = data.decode("utf-8", errors="ignore")
            reader = csv.reader(io.StringIO(text))
            rows = [row for row in reader]
            if rows:
                return rows
        except Exception:
            log.exception("CSV parse failed")
    return []

def salary_from_row(row: List[str]) -> Optional[int]:
    """–°–Ω–∞—á–∞–ª–∞ L, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî K."""
    l = row[COL["SAL_L"]].strip() if len(row) > COL["SAL_L"] else ""
    k = row[COL["SAL_K"]].strip() if len(row) > COL["SAL_K"] else ""
    src = l or k
    return parse_salary_value(src)

def role_matches(row: List[str], role: str) -> bool:
    act = row[COL["ACTIVITY"]].lower() if len(row) > COL["ACTIVITY"] else ""
    return role.lower() in act

def pick_vacancies(rows: List[List[str]], role: str, want: int) -> Dict[str, Any]:
    items: List[Dict[str, Any]] = []
    for i, row in enumerate(rows):
        if i == 0:  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
            continue
        if not role_matches(row, role):
            continue
        smax = salary_from_row(row)
        if smax is None:
            continue
        items.append({
            "idx": i,
            "salary": smax,
            "title": row[COL["TITLE"]] if len(row) > COL["TITLE"] else "–í–∞–∫–∞–Ω—Å–∏—è",
            "employer": row[COL["EMPLOYER"]] if len(row) > COL["EMPLOYER"] else "",
            "desc": row[COL["DESC"]] if len(row) > COL["DESC"] else "",
        })
    items.sort(key=lambda x: x["salary"], reverse=True)
    top = items[:5]
    return {"items": top, "found_higher": any(x["salary"] >= want for x in top)}

def pretty_rub(n: int) -> str:
    return f"{n:,}".replace(",", " ") + " ‚ÇΩ"

async def show_results_list(update: Update, context: ContextTypes.DEFAULT_TYPE,
                            results: Dict[str, Any], want: Optional[int] = None):
    items = results.get("items", [])
    found_higher = results.get("found_higher", False)

    if not items:
        await (update.message or update.callback_query).reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    header = "–£—Ä–∞! –Ø –Ω–∞—à—ë–ª –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã—à–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ üéâ" if (want and found_higher) \
             else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à—ë–ª –∏–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É, –Ω–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ:"

    lines = [header, ""]
    kb = []
    for it in items:
        title = it["title"] or "–í–∞–∫–∞–Ω—Å–∏—è"
        line = f"‚Ä¢ {title} ‚Äî {pretty_rub(it['salary'])}"
        lines.append(line)
        kb.append([InlineKeyboardButton(line[2:], callback_data=f"open:{it['idx']}")])

    await (update.message or update.callback_query).reply_text(
        "\n".join(lines), reply_markup=InlineKeyboardMarkup(kb)
    )

# ===== –•—ç–Ω–¥–ª–µ—Ä—ã =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find")]]
    )
    await (update.message or update.callback_query).reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏. "
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –Ω–∞—á–Ω—ë–º!",
        reply_markup=kb
    )

async def btn_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "find":
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(c, callback_data=f"city:{c}")] for c in CITIES]
        )
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
        context.user_data["state"] = "CHOOSE_CITY"
        return

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        context.user_data["city"] = city
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton(r, callback_data=f"role:{r}")] for r in ROLES]
        )
        await q.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}\n–ö–µ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=kb)
        context.user_data["state"] = "CHOOSE_ROLE"
        return

    if data.startswith("role:"):
        role = data.split(":", 1)[1]
        context.user_data["role"] = role
        context.user_data["state"] = "AWAIT_SALARY"
        await q.edit_message_text(
            f"–ì–æ—Ä–æ–¥: {context.user_data.get('city')}\n–†–æ–ª—å: {role}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 000):"
        )
        return

    if data.startswith("open:"):
        idx = int(data.split(":", 1)[1])
        rows = context.user_data.get("rows_cache") or []
        if not rows or idx <= 0 or idx >= len(rows):
            await q.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start.")
            return
        row = rows[idx]
        desc = row[COL["DESC"]] if len(row) > COL["DESC"] else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        desc = format_vacancy_desc(desc)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="back_to_list"),
             InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply:{idx}")]
        ])
        await q.edit_message_text(desc, reply_markup=kb)
        return

    if data == "back_to_list":
        results = context.user_data.get("last_results", {})
        await show_results_list(update, context, results)
        return

    if data.startswith("apply:"):
        await q.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è. (–¥–µ–º–æ)")
        return

async def ask_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_in = (update.message.text or "").strip()
    want = parse_salary_value(text_in)
    if not want:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏ *—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏* –±–µ–∑ —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `90000`.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: `90 000`, `90k/90–∫`, `90 —Ç—ã—Å`, `1.2–º`.",
            parse_mode="Markdown"
        )
        return

    context.user_data["salary"] = want
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è–ª —Å—É–º–º—É: {pretty_rub(want)}. –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏‚Ä¶")

    rows = await fetch_sheet_rows()
    if not rows:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    context.user_data["rows_cache"] = rows

    role = context.user_data.get("role", "")
    results = pick_vacancies(rows, role, want)
    context.user_data["last_results"] = results
    await show_results_list(update, context, results, want)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") == "AWAIT_SALARY":
        await ask_salary(update, context)
        return
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    return

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await (update.message or update.callback_query).reply_text("pong")


def format_vacancy_desc(raw: str) -> str:
    """
    –ß–∏—Å—Ç–∏–º –º–∞—Ä–∫–¥–∞—É–Ω/–º—É—Å–æ—Ä, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏—Ä–µ/–º–∞—Ä–∫–µ—Ä—ã, —Å–æ–±–∏—Ä–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –±–ª–æ–∫–∏
    –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –∫ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º.
    """
    import re

    if not raw:
        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

    text = raw.replace("\r\n", "\n").replace("\r", "\n")

    # 1) –ë–∞–∑–æ–≤–∞—è —á–∏—Å—Ç–∫–∞
    text = re.sub(r"\*{1,3}", "", text)        # ***, **, *
    text = re.sub(r"`{1,3}", "", text)          # ``` –∏ `
    text = re.sub(r"_{2,}", "_", text)          # ____ -> _
    text = re.sub(r"^\s*[-‚Äì‚Äî]{3,}\s*$", "", text, flags=re.MULTILINE)  # ¬´–ª–∏–Ω–∏–µ–π–∫–∏¬ª
    text = re.sub(r"\s*[-‚Äì‚Äî]{2,}\s*", " ‚Äî ", text)                      # ---, -- -> ¬´ ‚Äî ¬ª

    # 2) –ß–∏—Å—Ç–∏–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã —É —Å—Ç—Ä–æ–∫
    cleaned = []
    for ln in text.split("\n"):
        ln = ln.strip()
        if not ln:
            cleaned.append("")
            continue
        # –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ / –ø—É–ª–∏
        ln = re.sub(r"^[\-\‚Äì\‚Äî\‚Ä¢\*¬∑\u2022]+[)\.]?\s*", "", ln)
        ln = re.sub(r"^\d+\)\s*", "", ln)        # 1) ...
        ln = re.sub(r"^\(\d+\)\s*", "", ln)     # (1) ...
        ln = re.sub(r"\s{2,}", " ", ln)
        cleaned.append(ln)

    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ
    lines = []
    for ln in cleaned:
        if ln == "" and (not lines or lines[-1] == ""):
            continue
        lines.append(ln)

    # 3) –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    headers = [
        (r"^(–º—ã\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º|—É—Å–ª–æ–≤–∏—è|—á—Ç–æ\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º|—á—Ç–æ\s+–ø–æ–ª—É—á–∏—à—å)\b", "üíº", "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º"),
        (r"^(–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏|—á—Ç–æ\s+–Ω—É–∂–Ω–æ\s+–¥–µ–ª–∞—Ç—å|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å|—á–µ–º\s+–∑–∞–Ω–∏–º–∞—Ç—å—Å—è)\b", "üß∞", "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏"),
        (r"^(—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è|–º—ã\s+–æ–∂–∏–¥–∞–µ–º|–∫–∞–Ω–¥–∏–¥–∞—Ç|—á—Ç–æ\s+–Ω—É–∂–Ω–æ)\b", "‚úÖ", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è"),
        (r"^(–æ–ø–ª–∞—Ç–∞|–∑–∞—Ä–ø–ª–∞—Ç–∞|–¥–æ—Ö–æ–¥|–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏|–±–æ–Ω—É—Å—ã|—É—Å–ª–æ–≤–∏—è\s+–æ–ø–ª–∞—Ç—ã)\b", "üí∞", "–û–ø–ª–∞—Ç–∞ –∏ –±–æ–Ω—É—Å—ã"),
        (r"^(–∫–∞–∫\s+–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å\s+–¥–∞–ª—å—à–µ|–∫–∞–∫\s+–Ω–∞—á–∞—Ç—å|–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)\b", "üì©", "–ö–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"),
    ]
    def match_header(line: str):
        low = line.lower()
        for pat, emoji, title in headers:
            if re.search(pat, low):
                return f"{emoji} {title}"
        # –Ø–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        if len(line) <= 80 and line.endswith(":"):
            return f"üìå {line[:-1]}"
        return None

    blocks = []
    buf = []

    def flush_buf():
        if not buf:
            return
        formatted = []
        for b in buf:
            if not b:
                continue
            formatted.append(f"‚Ä¢ {b}")  # –≤—Å–µ–≥–¥–∞ —Ç–æ—á–∫–∏ ¬´‚Ä¢¬ª
        blocks.append("\n".join(formatted))
        buf.clear()

    for ln in lines:
        if not ln:
            flush_buf()
            continue
        hdr = match_header(ln)
        if hdr:
            flush_buf()
            blocks.append(hdr)
            continue
        # –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
        buf.append(ln)
    flush_buf()

    out_lines = []
    for i, b in enumerate(blocks):
        if i > 0:
            out_lines.append("")
        out_lines.append(b)

    out = "\n".join(out_lines).strip()
    out = re.sub(r"\n{3,}", "\n\n", out)
    return out or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

def main():
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    # –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç
    app.add_handler(CallbackQueryHandler(btn_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    async def _post_init(_: Application):
        # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (—á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª)
        try:
            await app.bot.delete_webhook(drop_pending_updates=False)
        except Exception:
            pass
        me = await app.bot.get_me()
        print(f"[‚úì] Bot online: @{me.username}", flush=True)

    app.post_init = _post_init
    app.run_polling()

if __name__ == "__main__":
    main()
