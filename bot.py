import os, re, csv, io, asyncio, logging
from typing import List, Dict, Any, Optional, Optional

from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN not set")

import requests
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler,
    CallbackQueryHandler, MessageHandler, filters
)

import warnings
from urllib3.exceptions import NotOpenSSLWarning
warnings.filterwarnings('ignore', category=NotOpenSSLWarning)
logging.basicConfig(level=logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('telegram.ext').setLevel(logging.WARNING)
logger = logging.getLogger("jobbot")

# ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
CITY_CHOOSER, ROLE_CHOOSER, SALARY_ASK, SHOW_RESULTS = range(4)

CITIES = ["–ú–æ—Å–∫–≤–∞"]  # –ø–æ–ø–æ–ª–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫
ROLES = ["–í–æ–¥–∏—Ç–µ–ª—å", "–ö—É—Ä—å–µ—Ä", "–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π", "–†–∞–±–æ—Ç–Ω–∏–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞"]

SHEET_ID = "1_KIjSrpBbc3xv-fuobapE2xj12kR6-tUmZEiLe41NKw"
SHEET_CSV_URL = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/export?format=csv"

# –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (0-based)
COL_ACTIVITY = 6   # G ‚Äî –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
COL_DESC     = 3   # D ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ/–¥–µ—Ç–∞–ª–∏
COL_SALARY_K = 10  # K
COL_SALARY_L = 11  # L (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)

def parse_salary_value(text: str) -> Optional[int]:
    """
    –ü–∞—Ä—Å–∏–º —Å—É–º–º—É: 90000, 90 000, 90k/90–∫, 90 —Ç—ã—Å, 1.2–º/1.2 –º–ª–Ω, –¥–∏–∞–ø–∞–∑–æ–Ω—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    import re
    if not text:
        return None
    t = str(text).lower().strip()
    nums: list[int] = []

    # 1) ¬´–≥–æ–ª—ã–µ¬ª —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/—Ç–æ—á–∫–∞–º–∏/–∑–Ω–∞–∫–æ–º –≤–∞–ª—é—Ç—ã
    for m in re.findall(r"\d[\d\s.,]*", t):
        digits = re.sub(r"[^\d]", "", m)
        if digits:
            nums.append(int(digits))

    # 2) 90k / 90–∫ / 90 —Ç—ã—Å
    for val, _ in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(k|–∫|—Ç—ã—Å)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0",""))*1_000)
            nums.append(v)
        except ValueError:
            pass

    # 3) 1.2m / 1.2–º / 1.2 –º–ª–Ω
    for val, _ in re.findall(r"(\d+(?:[\s.,]\d+)?)\s*(m|–º|–º–ª–Ω)", t):
        try:
            v = int(float(val.replace(" ", "").replace(",", ".").replace("\u00a0",""))*1_000_000)
            nums.append(v)
        except ValueError:
            pass

    if not nums:
        return None
    return max(nums)

def fetch_sheet_rows(timeout: int = 20) -> List[List[str]]:
    """–°–∫–∞—á–∏–≤–∞–µ–º CSV –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ)."""
    r = requests.get(SHEET_CSV_URL, timeout=timeout)
    r.raise_for_status()
    # Google –¥–∞—ë—Ç CSV –≤ UTF-8
    content = r.content.decode("utf-8")
    reader = csv.reader(io.StringIO(content))
    rows = list(reader)
    # —É–±–µ—Ä—ë–º –ø—É—Å—Ç—ã–µ —Ö–≤–æ—Å—Ç—ã
    return [row for row in rows if any(cell.strip() for cell in row)]

def pick_vacancies(rows: List[List[str]], role: str, min_salary: int) -> Dict[str, Any]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤–∏–¥—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (G), –∑–∞—Ç–µ–º –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (L, –∏–Ω–∞—á–µ K)."""
    role_low = role.lower()
    filtered = []
    for i, row in enumerate(rows[1:], start=1):  # –ø—Ä–æ–ø—É—Å—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
        if len(row) <= max(COL_ACTIVITY, COL_SALARY_L, COL_SALARY_K, COL_DESC):
            continue
        activity = (row[COL_ACTIVITY] or "").lower()
        if role_low not in activity:
            continue
        sL = parse_salary_value(row[COL_SALARY_L]) if row[COL_SALARY_L] else None
        sK = parse_salary_value(row[COL_SALARY_K]) if row[COL_SALARY_K] else None
        salary = sL if sL is not None else sK
        if salary is None:
            continue
        if salary >= min_salary:
            filtered.append({
                "idx": i,
                "salary": salary,
                "activity": row[COL_ACTIVITY],
                "desc": row[COL_DESC],
                "raw_k": row[COL_SALARY_K],
                "raw_l": row[COL_SALARY_L],
            })
    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø–æ –ø–æ—Ä–æ–≥—É ‚Äî –≤–æ–∑—å–º—ë–º –¢–û–ü-5 –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ä–æ–ª–∏
    if not filtered:
        pool = []
        for i, row in enumerate(rows[1:], start=1):
            if len(row) <= max(COL_ACTIVITY, COL_SALARY_L, COL_SALARY_K, COL_DESC):
                continue
            if role_low not in (row[COL_ACTIVITY] or "").lower():
                continue
            sL = parse_salary_value(row[COL_SALARY_L]) if row[COL_SALARY_L] else None
            sK = parse_salary_value(row[COL_SALARY_K]) if row[COL_SALARY_K] else None
            salary = sL if sL is not None else sK
            if salary is None:
                continue
            pool.append({
                "idx": i,
                "salary": salary,
                "activity": row[COL_ACTIVITY],
                "desc": row[COL_DESC],
                "raw_k": row[COL_SALARY_K],
                "raw_l": row[COL_SALARY_L],
            })
        pool.sort(key=lambda x: x["salary"], reverse=True)
        return {"items": pool[:5], "above": False}
    filtered.sort(key=lambda x: x["salary"], reverse=True)
    return {"items": filtered[:5], "above": True}

def fmt_salary_for_user(item: Dict[str, Any]) -> str:
    raw = item["raw_l"] or item["raw_k"] or f'{item["salary"]}'
    return re.sub(r"\s+", " ", raw).strip()

# ---- –•–µ–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find")],
    ])
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=kb)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=kb)
    context.user_data.clear()
    return CITY_CHOOSER

async def btn_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # –®–∞–≥ 1: –∫–ª–∏–∫ "–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏" -> –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    if data == "find":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(c, callback_data=f"city:{c}") for c in CITIES]])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
        return CITY_CHOOSER

    # –®–∞–≥ 2: –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ -> –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        context.user_data["city"] = city
        kb_rows = [[InlineKeyboardButton(role, callback_data=f"role:{role}")] for role in ROLES]
        await query.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}\n–ö–µ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(kb_rows))
        return ROLE_CHOOSER

    # –®–∞–≥ 3: –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å -> –ø—Ä–æ—Å–∏–º –∑–∞—Ä–ø–ª–∞—Ç—É
    if data.startswith("role:"):
        role = data.split(":", 1)[1]
        context.user_data["role"] = role
        await query.edit_message_text(
            f"–ì–æ—Ä–æ–¥: {context.user_data.get('city')}\n"
            f"–†–æ–ª—å: {role}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 000):"
        )
        return SALARY_ASK

    # –®–∞–≥ 5: –≤—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ -> –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    if data.startswith("open:"):
        idx = int(data.split(":", 1)[1])
        rows = context.user_data.get("rows_cache", [])
        if not rows or idx <= 0 or idx >= len(rows):
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start.")
            return ConversationHandler.END
        row = rows[idx]
        # row ‚Äî —ç—Ç–æ CSV-—Å–ø–∏—Å–æ–∫; –ø–æ–∫–∞–∂–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ D
        desc = row[COL_DESC] if len(row) > COL_DESC else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="back_to_list"),
             InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply:{idx}")]
        ])
        await query.edit_message_text(desc, reply_markup=kb)
        return SHOW_RESULTS

    if data == "back_to_list":
        # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫
        results = context.user_data.get("last_results", {})
        await show_results_list(update, context, results)
        return SHOW_RESULTS

    if data.startswith("apply:"):
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è. (–¥–µ–º–æ-—Ä–µ–∂–∏–º)")
        return SHOW_RESULTS

    return ConversationHandler.END

async def ask_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_in = (update.message.text or "").strip()
    want = parse_salary_value(text_in)
    if not want:
        msg = ("–Ø –Ω–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏ *—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏* –±–µ–∑ —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `90000`\n"
               "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã: `90 000`, `90k/90–∫`, `90 —Ç—ã—Å`.")
        await update.message.reply_text(msg, parse_mode="Markdown")
        return SALARY_ASK

    context.user_data["salary"] = want
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    pretty = f"{want:,}".replace(",", " ")
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è–ª —Å—É–º–º—É: {pretty} ‚ÇΩ. –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏‚Ä¶")

    try:
        rows = fetch_sheet_rows()
    except Exception:
        logger.exception("fetch error")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    context.user_data["rows_cache"] = rows
    results = pick_vacancies(rows, context.user_data.get("role",""), want)
    context.user_data["last_results"] = results

    items = results.get("items") or []
    if not items:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    await show_results_list(update, context, results, want)
    return SHOW_RESULTS

async def show_results_list(update: Update, context: ContextTypes.DEFAULT_TYPE, results: Dict[str, Any], want: Optional[int]=None):
    items = results["items"]
    above = results["above"] if want is None else any(i["salary"] >= want for i in items)
    if not items:
        await (update.callback_query or update.message).reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    header = "üéâ –£—Ä–∞, —è –Ω–∞—à—ë–ª –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã—à–µ!" if above else "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–∞–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
    lines = []
    btn_rows = []
    for n, it in enumerate(items, start=1):
        lines.append(f"{n}) {it['activity']} ‚Äî {fmt_salary_for_user(it)}")
        btn_rows.append([InlineKeyboardButton(f"{n}) –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"open:{it['idx']}")])

    text = header + "\n\n" + "\n".join(lines) + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(btn_rows))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(btn_rows))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await (update.message or update.callback_query).reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(entry_points=[CommandHandler("start", start)],
        states={
            CITY_CHOOSER: [CallbackQueryHandler(btn_router)],
            ROLE_CHOOSER: [CallbackQueryHandler(btn_router)],
            SALARY_ASK:   [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_salary)],
            SHOW_RESULTS: [CallbackQueryHandler(btn_router)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    # –î–æ–ø. –∫–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏" –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî —Ç–æ–∂–µ –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥
    app.add_handler(CallbackQueryHandler(btn_router, pattern="^(find|city:|role:|open:|back_to_list|apply:)"))
    app.add_handler(conv)

    app.run_polling()

if __name__ == "__main__":
    main()
